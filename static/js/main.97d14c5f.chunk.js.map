{"version":3,"sources":["components/ToDoItem/ToDoItem.js","components/AddNewItem/AddNewItem.js","components/Filter/FilterState.js","components/Filter/Filter.js","components/ToDoList/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoItem","todo","onDelete","onCompleted","basicStyle","cursor","marginRight","completed","textDecoration","className","style","onClick","id","text","AddNewItem","onAdd","useState","newToDoTxt","setNewToDoTxt","type","placeholder","value","onChange","event","todotxt","target","newtxt","trim","length","FilterState","Filter","color","onFilterChange","fs","props","onFilter","getStyle","styleAsked","currentFilter","this","Component","idCounter","ToDoList","state","todolist","filter","addHandler","newToDo","newToDoList","setState","deleteHandler","updatedList","checkCompletedHandler","completedList","find","clearCompletedHandler","clearedList","filterHandler","button","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97d14c5f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./ToDoItem.css\";\r\n\r\nexport default function ToDoItem({ todo, onDelete, onCompleted }) {\r\n  //basic style:\r\n  let basicStyle = { cursor: \"pointer\", marginRight: 10 };\r\n  if (todo.completed) {\r\n    basicStyle.textDecoration = \"line-through\";\r\n  }\r\n\r\n  //completed:\r\n  const handleCompleted = () => {\r\n    onCompleted(todo.id);\r\n  };\r\n\r\n  //deleted:\r\n  const handleDelete = () => {\r\n    onDelete(todo.id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"ToDoItem\">\r\n      <p style={basicStyle} onClick={handleCompleted}>\r\n        {todo.text}\r\n      </p>\r\n      <button onClick={handleDelete}>X</button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./AddNewItem.css\";\r\n\r\nexport default function AddNewItem({ onAdd }) {\r\n  //useState hook\r\n  const [newToDoTxt, setNewToDoTxt] = useState(\"\");\r\n\r\n  //setting state to user's text from input:\r\n  const ToDoInputHandler = (event) => {\r\n    const todotxt = event.target.value;\r\n    setNewToDoTxt(todotxt);\r\n  };\r\n\r\n  //handling adding new text:\r\n  const addHandler = () => {\r\n    const newtxt = newToDoTxt.trim();\r\n    if (newtxt.length === 0) {\r\n      return;\r\n    }\r\n\r\n    onAdd(newtxt);\r\n    //reset input:\r\n    setNewToDoTxt(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"formContainer\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Type here\"\r\n        value={newToDoTxt}\r\n        onChange={ToDoInputHandler}\r\n      />\r\n      <button type=\"submit\" onClick={addHandler}>\r\n        Add New Task\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","export const FilterState = {\r\n  ALL: \"ALL\",\r\n  ACTIVE: \"ACTIVE\",\r\n  COMPLETED: \"COMPLETED\",\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport { FilterState } from \"./FilterState\";\r\n\r\nimport \"./Filter.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport default class Filter extends Component {\r\n  basicStyle = { color: \"\" };\r\n\r\n  onFilterChange = (fs) => {\r\n    this.props.onFilter(fs);\r\n  };\r\n\r\n  //filter color:\r\n  getStyle = (styleAsked) => {\r\n    if (styleAsked === this.props.currentFilter) {\r\n      return { color: \"#ff6347\" };\r\n    } else {\r\n      return { color: \"#000\" };\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Filter\">\r\n        <span\r\n          onClick={() => this.onFilterChange(FilterState.ALL)}\r\n          style={this.getStyle(FilterState.ALL)}\r\n        >\r\n          All\r\n        </span>\r\n        <span\r\n          onClick={() => this.onFilterChange(FilterState.ACTIVE)}\r\n          style={this.getStyle(FilterState.ACTIVE)}\r\n        >\r\n          Active\r\n        </span>\r\n        <span\r\n          onClick={() => this.onFilterChange(FilterState.COMPLETED)}\r\n          style={this.getStyle(FilterState.COMPLETED)}\r\n        >\r\n          Completed\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport ToDoItem from \"../ToDoItem/ToDoItem\";\r\nimport AddNewItem from \"../AddNewItem/AddNewItem\";\r\nimport Filter from \"../Filter/Filter\";\r\nimport { FilterState } from \"../Filter/FilterState\";\r\n\r\nimport \"./ToDoList.css\";\r\n\r\nlet idCounter = 1;\r\nexport default class ToDoList extends Component {\r\n  state = {\r\n    todolist: [],\r\n    filter: FilterState.ALL,\r\n  };\r\n\r\n  //adding tasks:\r\n  addHandler = (newtxt) => {\r\n    idCounter++;\r\n\r\n    const newToDo = { id: idCounter, text: newtxt, completed: false };\r\n    const newToDoList = [...this.state.todolist, newToDo];\r\n    this.setState({ todolist: newToDoList });\r\n  };\r\n\r\n  //deleting tasks:\r\n  deleteHandler = (id) => {\r\n    const updatedList = this.state.todolist.filter((todo) => todo.id !== id);\r\n    this.setState({ todolist: updatedList });\r\n  };\r\n\r\n  //check completed tasks:\r\n  checkCompletedHandler = (id) => {\r\n    const completedList = [...this.state.todolist];\r\n    const todo = completedList.find((todo) => todo.id === id);\r\n    if (todo) {\r\n      todo.completed = !todo.completed;\r\n      this.setState({ todolist: completedList });\r\n    }\r\n  };\r\n\r\n  //clear completed tasks:\r\n  clearCompletedHandler = () => {\r\n    const clearedList = this.state.todolist.filter(\r\n      (todo) => todo.completed === false\r\n    );\r\n    this.setState({ todolist: clearedList });\r\n  };\r\n\r\n  //filter items:\r\n  filterHandler = () => {\r\n    switch (this.state.filter) {\r\n      case FilterState.ACTIVE:\r\n        return this.state.todolist.filter((todo) => todo.completed === false);\r\n      case FilterState.COMPLETED:\r\n        return this.state.todolist.filter((todo) => todo.completed === true);\r\n      default:\r\n        return this.state.todolist;\r\n    }\r\n  };\r\n\r\n  filter = (fs) => {\r\n    this.setState({ filter: fs });\r\n  };\r\n\r\n  render() {\r\n    let button = null;\r\n\r\n    if (this.state.filter === FilterState.COMPLETED) {\r\n      button = (\r\n        <button className=\"clear\" onClick={this.clearCompletedHandler}>\r\n          Clear Completed\r\n        </button>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <AddNewItem onAdd={this.addHandler} />\r\n        <Filter currentFilter={this.state.filter} onFilter={this.filter} />\r\n        <br />\r\n        <div className=\"ToDoList\">\r\n          {this.filterHandler().map((todo) => {\r\n            return (\r\n              <ToDoItem\r\n                key={todo.id}\r\n                todo={todo}\r\n                onDelete={this.deleteHandler}\r\n                onCompleted={this.checkCompletedHandler}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        {button}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\n\nimport ToDoList from \"./components/ToDoList/ToDoList\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Container\">\n          <h1>To Do Application</h1>\n          <ToDoList />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}